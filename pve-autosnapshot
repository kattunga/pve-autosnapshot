#!/bin/bash

#######################################################################################
# https://github.com/kattunga/pve-autosnapshot
#
# automatic snapshot of VMs and CTs from any node in cluster using pvesh
#
# pve-autosnapshot.sh --node pve-main --id 213 --prefix 'day-' --snap-retain '30 days ago'
#
#######################################################################################

DATE=/usr/bin/date

LOG_DATE_FORMAT="+%Y-%m-%d %H:%M:%S"
SNAP_DATE_FORMAT="+%Y%m%d%H%M%S"

TODAY_DATE_TIME=$(${DATE} "${SNAP_DATE_FORMAT}")

NODE_ID=
VM_TYPE=all
VM_ID=
SNAP_PREF=
MAX_TIME=
SNAPSHOT=true
REPLICATE_TO_TARGET=
QUIET=false
DEBUG=false
SYSLOG=false

VM_LIST_LXC=
VM_LIST_QEMU=

LOCK_PATH=/var/lock

TMP_PATH=/tmp/$(basename $0 .sh).$$
ERR_FILE=$TMP_PATH/error
LOG_FILE=$TMP_PATH/log

declare -a on_exit_items
####################################Function###########################################
#
# on exit
#
on_exit() {
	sig="$1"; shift
	[ $DEBUG == true ] && log "on_exit: signal = $sig"
    for i in "${on_exit_items[@]}"; do
        [ $DEBUG == true ] && log "on_exit: $i"
        eval $i
    done
    # propigate the sig
    if [ $sig != EXIT ]; then
    	trap - $sig EXIT
    	kill -s $sig $$
    fi
}

####################################Function###########################################
#
# on exit run
#
on_exit_run() {
    local n=${#on_exit_items[*]}
    on_exit_items[$n]="$*"
    if [[ $n -eq 0 ]]; then
        [ $DEBUG == true ] && log "setting trap"
        for sig in EXIT HUP INT QUIT PIPE TERM; do
        	[ $DEBUG == true ] && log "trap \"on_exit $sig\" $sig"
        	trap "on_exit $sig" $sig
        done
    fi
}

#######################################################################################
#
# Function log to std out and log file(s)
#
log() {

	# if log has new lines, log each line separately
	if [[ $1 == *$'\n'* ]]; then
		local IFS=$'~'
		for l in ${1//$'\n'/'~   '}; do
			log "$l"
		done
		return
	fi

	# don't output blank lines
	if [ -n "$1" ] && [ "$1" != "" ]; then

		date_line=$($DATE "$LOG_DATE_FORMAT")

		# to console
		if [ $QUIET == false ]; then

			if [ "$2" == "2" ]; then
				echo "$date_line $1" >&2 
				echo -e "$date_line \e[31m$1\e[0m"
			else
				echo "$date_line $1"
			fi
		fi

		# to logfile
		echo "$date_line $1" >> $LOG_FILE 2> /dev/null

		# to syslog
		if [ $SYSLOG == true ]; then
			line="$1"
			#fix lines beginning w/ '->' as logger reads as cl option
			if [ "->" == "${line:0:2}" ]; then
				line="${line:2}"
			fi
			logger -t $(basename $0) "$line"
		fi
	fi
}

#######################################################################################
#
# Function check if error was logged
#
check_for_error() {
	if [ -s "$LOG_ERROR_FILE" ]; then
		log "ERROR: $(cat $LOG_ERROR_FILE)" "2"
		execute_notification
		exit 1
	fi
}

#######################################################################################
#
# Function log error
#
log_error() {
	echo "$1" > $LOG_ERROR_FILE
	check_for_error
}

#######################################################################################
#
# Function get LXC/QEMU vm lists
#
get_vms ()
{
    if [[ "${VM_TYPE}" == "all" || "${VM_TYPE}" == "lxc" ]]
    then
        [ $DEBUG = true ] && log "get lxc vm list"
        VM_LIST_LXC=$( pvesh get /nodes/${NODE_ID}/lxc --noborder=1 --noheader=1 | awk '{print$2}' 2> $ERR_FILE )
        check_for_error
        if [ "${VM_ID}" != "" ]; then
            VM_LIST_LXC=$( echo "$VM_LIST_LXC" | grep -E -w ${VM_ID} )
        fi
    fi

    if [[ "${VM_TYPE}" == "all" || "${VM_TYPE}" == "qemu" ]]
    then
        [ $DEBUG = true ] && log "get qemu vm list"
        VM_LIST_QEMU=$( pvesh get /nodes/${NODE_ID}/qemu --noborder=1 --noheader=1 | awk '{print$2}' 2> $ERR_FILE )
        check_for_error
        if [ "${VM_ID}" != "" ]; then
            VM_LIST_QEMU=$( echo "$VM_LIST_QEMU" | grep -E -w ${VM_ID} )
        fi
    fi
}

#######################################################################################
#
# Function snapshot one VM and clean old ones if required, at least one snapshot is always keeped
#
snapshot_vm ()
{
    local type=$1
    local vm=$2

    [ $DEBUG = true ] && log "vm ${vm}"

    # clan old snapshots
    if [ ! -z "${MAX_TIME}" ]
    then
        RETAIN_DATE_TIME=$( ${DATE} "${SNAP_DATE_FORMAT}" --date="${MAX_TIME}" )
        if [ $RETAIN_DATE_TIME -gt $TODAY_DATE_TIME ]
        then
            log_error "ERROR: wrong --snap-retain value, remember to add the 'ago' word. ex: 1 day ago or use the minus sign: -2 days"
        fi

        [ $DEBUG = true ] && log "vm ${vm} get snapshot list"
        SNAP_LIST=$( pvesh get /nodes/${NODE_ID}/${type}/${vm}/snapshot --output-format yaml | grep "name: ${SNAP_PREF}" | awk '{print$2}' | sort | head -n -1 2> $ERR_FILE )
        check_for_error

        for snap in ${SNAP_LIST}
        do
            # get the datetime portion of the snapshot name
            SNAP_DATE_TIME=${snap:( ${#SNAP_PREF} )}

            #  need to ensure $SNAP_DATE_TIME is numeric and 14 digits for comparison to $RETAIN_DATE_TIME
            if [ $( echo ${SNAP_DATE_TIME} | grep -c '^[0-9]*$' ) -eq 1 ] && [ ${#SNAP_DATE_TIME} -eq 14 ]; then
                if [ $RETAIN_DATE_TIME -gt $SNAP_DATE_TIME ]
                then
                    log "vm ${vm} destroying snapshot $snap"
                    output=$( pvesh delete /nodes/${NODE_ID}/${type}/${vm}/snapshot/${snap} 2> $ERR_FILE )
                    check_for_error
                    [ $DEBUG = true ] && log "vm ${vm} $output"

                else
                    [ $DEBUG = true ] && log "vm ${vm} $snap is not expired."
                fi
            else
                log "vm ${vm} $snap name has wrong datetime format."
            fi
        done
    fi

    # create snapshot
    if [ ${SNAPSHOT} == true ]
    then
        local SNAPNAME=${SNAP_PREF}${TODAY_DATE_TIME}

        log "vm $vm creating snapshot $SNAPNAME."
        output=$( pvesh create /nodes/${NODE_ID}/${type}/${vm}/snapshot --snapname "${SNAPNAME}" 2> $ERR_FILE )
        check_for_error
        [ $DEBUG = true ] && log "vm $vm $output"
    fi
}


#######################################################################################
#
# Function replicate one VM
#
replicate_vm_now()
{
    local vm=$1

    [ $DEBUG = true ] && log "vm ${vm} get replication tasks."
    replication_tasks=$( pvesh get /nodes/${NODE_ID}/replication --guest $vm --noborder=1 --noheader=1 )

    for task in ${replication_tasks}
    do
        [ $DEBUG = true ] && log "vm ${vm} replication task ${task} get status."
        pvesh get /nodes/${NODE_ID}/replication/${task}/status --noborder=1 --noheader=1 | grep "target" | grep -w "${REPLICATE_TO_TARGET}" > /dev/null 2>&1
        if [ $? -eq 0 ]
        then
            log "vm ${vm} triggering replication task ${task}."
            output=$( pvesh create /nodes/${NODE_ID}/replication/${task}/schedule_now )
            [ $DEBUG = true ] && log "vm ${vm} $output"
        else
            [ $DEBUG = true ] && log "vm ${vm} replication task ${task} does not target node ${REPLICATE_TO_TARGET}."
        fi
    done
}

#######################################################################################
#
# Function loop al vm and snapshot/replicate
#
do_work ()
{
    get_vms

    local vm

    # trigger snapshot/cleanup
    for vm in ${VM_LIST_LXC}
    do
        snapshot_vm "lxc" ${vm}
    done

    for vm in ${VM_LIST_QEMU}
    do
        snapshot_vm "qemu" ${vm}
    done

    # trigger replication
    if [ ! -z "${REPLICATE_TO_TARGET}" ]
    then
        log "waiting 1m to trigger replication tasks"
        sleep 1m

        for vm in ${VM_LIST_LXC}
        do
            replicate_vm_now ${vm}
        done

        for vm in ${VM_LIST_QEMU}
        do
            replicate_vm_now ${vm}
        done
    fi
}

usage() {
	echo ""
	echo "Usage: $(basename $0) --node NODE --prefix PREFIX --snap-retain \"RETAIN\" [--type TYPE] [--id VMID | --all]"
	echo "  -n|--node            node name (required)"
    echo "  -p|--prefix          snapshot prefix name. (required)"
	echo "  -r|--snap-retain     max time to preserve/retain snapshots. Default infinite"
	echo "                         e.g. \"7 days ago\", \"12 hours ago\""
	echo "  --type               vm type to snapshot (lxc/qemu/all). Default all"
	echo "  --id                 vm id to snapshot, you specify multiple id using regex \"id1|id2|id3\". Default all"
    echo "  --no-snap            no snapshot, only clean old snapshots"
    echo "  --tr-target          trigger replication tasks to target after snapshot"
	echo "  --quiet              quiet. suppress output to stdout"
	echo "  --debug              show diagnositc information"
	echo "  -h --help            display usage options "
	exit 
}

#######################################################################################
#################################### Main Entry #######################################
#######################################################################################

[ $# -eq 0 ] && usage

while [ $# -gt 0 ]
do
    case "$1" in
        -n|--node)
            shift
            NODE_ID=$1
            ;;
        -p|--prefix)
            shift
            SNAP_PREF="$1"
            ;;
        -r|--snap-retain)
            shift
            MAX_TIME="$1"
            ;;
        --type)
            shift
            VM_TYPE=$1
            ;;
        --id)
            shift
            VM_ID=$1
            ;;
        --no-snap)
        	SNAPSHOT=false
        	;;
        --tr-target)
            shift
        	REPLICATE_TO_TARGET=$1
        	;;
        --quiet)
         	QUIET=true
         	;;
        --debug)
            DEBUG=true
            ;;
        -h|--help)
         	usage
         	;;
        *)
         	echo "Invalid option $1."
            usage
            ;;
    esac
    shift
done

# check required params
if [ -z "${NODE_ID}" ]
then
	echo ""
	echo "Missing parameter -n|--node"
	usage
fi
if [ -z "${SNAP_PREF}" ]
then
	echo ""
	echo "Missing parameter -p|--prefix"
	usage
fi

# lock & err file isolation based on source path
NODE_ID_HASH=${NODE_ID//\//#}

# lock file to avoid concurrent snapshot
LOCK_FILE=$LOCK_PATH/$(basename $0 .sh)-${NODE_ID_HASH}

# Check if snapshot is running
if [ -e "$LOCK_FILE" ]
then
	log_error "ERROR: autosnapshot is currently running."
	exit 1
fi

# create isolated tmp directory
mkdir -p $TMP_PATH > /dev/null 2>&1
[ $DEBUG = true ] && log "TMP_PATH = $TMP_PATH"

# save target name as first line of log
log "Node: $NODE_ID vm: $VM_ID"

# register exit/clean up tasks
on_exit_run	log "end-------------------------------------------------------------"
[ $DEBUG = false ] && on_exit_run rm -rf $TMP_PATH
on_exit_run rm -f $LOCK_FILE

# set the lock flag w/ pid
touch $LOCK_FILE > /dev/null 2>&1
if [ $? -gt 0 ]
then
	echo "ERROR: unable to create lock file: $LOCK_FILE"
	exit 1
fi
echo $$ > $LOCK_FILE

# create/clean snapshots
do_work

exit 0
